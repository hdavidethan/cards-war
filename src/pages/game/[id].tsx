import PlayingCard from "@/components/PlayingCard";
import fetcher from "@/lib/fetcher";
import { CardJson } from "@/lib/game/Card";
import { Player } from "@prisma/client";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import useSWR from "swr";

export default function GamePage() {
  const router = useRouter();
  const { id: gameId } = router.query;

  const { data, error, isLoading } = useSWR(`/api/game/${gameId}`, fetcher);

  if (error) {
    return <p>Cannot Retrieve Game</p>;
  }

  if (isLoading) {
    return <></>;
  }

  const rankValues = {
    TWO: 1,
    THREE: 2,
    FOUR: 3,
    FIVE: 4,
    SIX: 5,
    SEVEN: 6,
    EIGHT: 7,
    NINE: 8,
    TEN: 9,
    J: 10,
    Q: 11,
    K: 12,
    A: 13,
  } as const;

  function getTurnWinnerDirection(
    rank1: keyof typeof rankValues,
    rank2: keyof typeof rankValues
  ) {
    if (rankValues[rank1] > rankValues[rank2]) {
      return "←";
    }
    return "→";
  }

  return (
    <>
      <Head>
        <title>Replaying Game</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="lg:mx-64 md:mx-10 mx-4 pt-5">
          <p className="mb-4 text-blue-600 hover:text-blue-800">
            <Link href="/">Return to Home</Link>
          </p>
          <h1 className="text-3xl mb-10">Replaying Game {gameId}</h1>
          <div className="grid grid-cols-12">
            <div />
            <h2 className="text-xl mb-3 col-span-5">
              Player 1:{" "}
              {
                data?.players?.find(
                  (player: Player) => player.id === data.playersId?.[0]
                ).name
              }
            </h2>
            <div />
            <h2 className="text-xl mb-3 col-span-5">
              Player 2:{" "}
              {
                data?.players?.find(
                  (player: Player) => player.id === data.playersId?.[1]
                ).name
              }
            </h2>
            {data?.gameHistory?.moves?.map(
              (
                move: {
                  playerOneMoves: Array<CardJson>;
                  playerTwoMoves: Array<CardJson>;
                },
                index: number
              ) => (
                <>
                  <p className="mt-6">Turn {index + 1}</p>
                  <div key={`turn-${index}-1`} className="col-span-5">
                    {move.playerOneMoves.map((card, cardIndex) => (
                      <PlayingCard
                        key={`turn-${index}-1-${cardIndex}`}
                        rank={card.rank}
                        suit={card.suit}
                        faceUp={card.faceUp}
                      />
                    ))}
                  </div>
                  <p className="lg:text-7xl md:text-5xl text-4xl mt-10">
                    {getTurnWinnerDirection(
                      move.playerOneMoves[move.playerOneMoves.length - 1].rank,
                      move.playerTwoMoves[move.playerTwoMoves.length - 1].rank
                    )}
                  </p>
                  <div key={`turn-${index}-2`} className="col-span-5">
                    {move.playerTwoMoves.map((card, cardIndex) => (
                      <PlayingCard
                        key={`turn-${index}-1-${cardIndex}`}
                        rank={card.rank}
                        suit={card.suit}
                        faceUp={card.faceUp}
                      />
                    ))}
                  </div>
                </>
              )
            )}
          </div>
          <p className="my-10 font-bold">Winner: {data.winner.name}</p>
        </div>
      </main>
    </>
  );
}
