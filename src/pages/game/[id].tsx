import PlayingCard from "@/components/PlayingCard";
import fetcher from "@/lib/fetcher";
import { CardJson } from "@/lib/game/Card";
import { Player } from "@prisma/client";
import Head from "next/head";
import { useRouter } from "next/router";
import useSWR from "swr";

export default function GamePage() {
  const router = useRouter();
  const { id: gameId } = router.query;

  const { data, error } = useSWR(`/api/game/${gameId}`, fetcher);

  if (error) {
    return <p>Cannot Retrieve Game</p>;
  }

  return (
    <>
      <Head>
        <title>Replaying Game</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="mx-64 pt-5">
          <h1 className="text-3xl mb-3">Replaying Game {gameId}</h1>
          <div className="grid grid-cols-2">
            <h2 className="text-xl mb-3">
              Player 1:{" "}
              {
                data?.players?.find(
                  (player: Player) => player.id === data.playersId?.[0]
                ).name
              }
            </h2>
            <h2 className="text-xl mb-3">
              Player 2:{" "}
              {
                data?.players?.find(
                  (player: Player) => player.id === data.playersId?.[1]
                ).name
              }
            </h2>
            {data?.gameHistory?.moves?.map(
              (
                move: {
                  playerOneMoves: Array<CardJson>;
                  playerTwoMoves: Array<CardJson>;
                },
                index: number
              ) => (
                <>
                  <div key={`turn-${index}-1`}>
                    {move.playerOneMoves.map((card, cardIndex) => (
                      <PlayingCard
                        key={`turn-${index}-1-${cardIndex}`}
                        rank={card.rank}
                        suit={card.suit}
                        faceUp={card.faceUp}
                      />
                    ))}
                  </div>
                  <div key={`turn-${index}-2`}>
                    {move.playerTwoMoves.map((card, cardIndex) => (
                      <PlayingCard
                        key={`turn-${index}-1-${cardIndex}`}
                        rank={card.rank}
                        suit={card.suit}
                        faceUp={card.faceUp}
                      />
                    ))}
                  </div>
                </>
              )
            )}
          </div>
        </div>
      </main>
    </>
  );
}
